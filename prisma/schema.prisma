// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                      @id @default(uuid())
  email                     String                      @unique
  password                  String
  role                      Role                        @default(USER)
  resetToken                String?
  resetTokenExpiry          DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  status                    UserStatus                  @default(ACTIVE)
  VerificationEnrollment    VerificationEnrollment[]
  UserInfo                  UserInfo?
  VirtualAccount            VirtualAccount[]
  Wallet                    Wallet[]
  WalletTransaction         WalletTransaction[]
  VirtualAccountTransaction VirtualAccountTransaction[]
  Beneficiary               Beneficiary[]
}

// Create model for user info
model UserInfo {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  firstName   String
  lastName    String
  phoneNumber String
  gender      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Create model for verification bank to have id, type, number, data
model VerificationBank {
  id                     String                   @id @default(uuid())
  type                   VerificationType
  number                 String
  data                   Json
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  VerificationEnrollment VerificationEnrollment[]
}

model VerificationEnrollment {
  id                 String           @id @default(uuid())
  user               User             @relation(fields: [userId], references: [id])
  userId             String
  data               Json
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  verificationBank   VerificationBank @relation(fields: [verificationBankId], references: [id])
  verificationBankId String
}

model VirtualAccount {
  id                        String                      @id @default(uuid())
  user                      User                        @relation(fields: [userId], references: [id])
  userId                    String
  number                    String
  balance                   Float                       @default(0)
  status                    VirtualAccountStatus        @default(ACTIVE)
  bankName                  String
  data                      Json
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  VirtualAccountTransaction VirtualAccountTransaction[]
}

model WalletType {
  id         String   @id @default(uuid())
  name       String   @unique
  percentage Float    @default(0)
  duration   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Wallet     Wallet[]
}

model Wallet {
  id                String              @id @default(uuid())
  name              String
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  walletType        WalletType          @relation(fields: [walletTypeId], references: [id])
  balance           Float               @default(0)
  targetAmount      Float
  percentageCut     Float
  expiryDate        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  walletTypeId      String
  WalletTransaction WalletTransaction[]
}

model WalletTransaction {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  amount    Float
  narration String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  walletId  String
}

model VirtualAccountTransaction {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  virtualAccount   VirtualAccount @relation(fields: [virtualAccountId], references: [id])
  virtualAccountId String
  amount           Float
  narration        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Beneficiary {
  id        String   @id @default(uuid())
  name      String
  account   String
  bank      String
  bankCode  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum VerificationType {
  BVN
  NIN
  PHONENUMBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum VirtualAccountStatus {
  ACTIVE
  INACTIVE
}
